// Generated by gencpp from file snake_demo/feedback_angles.msg
// DO NOT EDIT!


#ifndef SNAKE_DEMO_MESSAGE_FEEDBACK_ANGLES_H
#define SNAKE_DEMO_MESSAGE_FEEDBACK_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_demo
{
template <class ContainerAllocator>
struct feedback_angles_
{
  typedef feedback_angles_<ContainerAllocator> Type;

  feedback_angles_()
    : timestamp(0)
    , enc_angle1(0.0)
    , enc_angle2(0.0)
    , enc_angle3(0.0)
    , enc_angle4(0.0)
    , enc_angle5(0.0)
    , xvel1(0)
    , yvel1(0)
    , xvel2(0)
    , yvel2(0)
    , xvel3(0)
    , yvel3(0)
    , xvel4(0)
    , yvel4(0)
    , xvel5(0)
    , yvel5(0)  {
    }
  feedback_angles_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , enc_angle1(0.0)
    , enc_angle2(0.0)
    , enc_angle3(0.0)
    , enc_angle4(0.0)
    , enc_angle5(0.0)
    , xvel1(0)
    , yvel1(0)
    , xvel2(0)
    , yvel2(0)
    , xvel3(0)
    , yvel3(0)
    , xvel4(0)
    , yvel4(0)
    , xvel5(0)
    , yvel5(0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef float _enc_angle1_type;
  _enc_angle1_type enc_angle1;

   typedef float _enc_angle2_type;
  _enc_angle2_type enc_angle2;

   typedef float _enc_angle3_type;
  _enc_angle3_type enc_angle3;

   typedef float _enc_angle4_type;
  _enc_angle4_type enc_angle4;

   typedef float _enc_angle5_type;
  _enc_angle5_type enc_angle5;

   typedef int16_t _xvel1_type;
  _xvel1_type xvel1;

   typedef int16_t _yvel1_type;
  _yvel1_type yvel1;

   typedef int16_t _xvel2_type;
  _xvel2_type xvel2;

   typedef int16_t _yvel2_type;
  _yvel2_type yvel2;

   typedef int16_t _xvel3_type;
  _xvel3_type xvel3;

   typedef int16_t _yvel3_type;
  _yvel3_type yvel3;

   typedef int16_t _xvel4_type;
  _xvel4_type xvel4;

   typedef int16_t _yvel4_type;
  _yvel4_type yvel4;

   typedef int16_t _xvel5_type;
  _xvel5_type xvel5;

   typedef int16_t _yvel5_type;
  _yvel5_type yvel5;





  typedef boost::shared_ptr< ::snake_demo::feedback_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_demo::feedback_angles_<ContainerAllocator> const> ConstPtr;

}; // struct feedback_angles_

typedef ::snake_demo::feedback_angles_<std::allocator<void> > feedback_angles;

typedef boost::shared_ptr< ::snake_demo::feedback_angles > feedback_anglesPtr;
typedef boost::shared_ptr< ::snake_demo::feedback_angles const> feedback_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_demo::feedback_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_demo::feedback_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snake_demo::feedback_angles_<ContainerAllocator1> & lhs, const ::snake_demo::feedback_angles_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.enc_angle1 == rhs.enc_angle1 &&
    lhs.enc_angle2 == rhs.enc_angle2 &&
    lhs.enc_angle3 == rhs.enc_angle3 &&
    lhs.enc_angle4 == rhs.enc_angle4 &&
    lhs.enc_angle5 == rhs.enc_angle5 &&
    lhs.xvel1 == rhs.xvel1 &&
    lhs.yvel1 == rhs.yvel1 &&
    lhs.xvel2 == rhs.xvel2 &&
    lhs.yvel2 == rhs.yvel2 &&
    lhs.xvel3 == rhs.xvel3 &&
    lhs.yvel3 == rhs.yvel3 &&
    lhs.xvel4 == rhs.xvel4 &&
    lhs.yvel4 == rhs.yvel4 &&
    lhs.xvel5 == rhs.xvel5 &&
    lhs.yvel5 == rhs.yvel5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snake_demo::feedback_angles_<ContainerAllocator1> & lhs, const ::snake_demo::feedback_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snake_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::snake_demo::feedback_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_demo::feedback_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::feedback_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::feedback_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::feedback_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::feedback_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efca087178a4608ce59813f65425d68e";
  }

  static const char* value(const ::snake_demo::feedback_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefca087178a4608cULL;
  static const uint64_t static_value2 = 0xe59813f65425d68eULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_demo/feedback_angles";
  }

  static const char* value(const ::snake_demo::feedback_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n"
"float32 enc_angle1\n"
"float32 enc_angle2\n"
"float32 enc_angle3\n"
"float32 enc_angle4\n"
"float32 enc_angle5\n"
"int16 xvel1\n"
"int16 yvel1\n"
"int16 xvel2\n"
"int16 yvel2\n"
"int16 xvel3\n"
"int16 yvel3\n"
"int16 xvel4\n"
"int16 yvel4\n"
"int16 xvel5\n"
"int16 yvel5\n"
;
  }

  static const char* value(const ::snake_demo::feedback_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_demo::feedback_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.enc_angle1);
      stream.next(m.enc_angle2);
      stream.next(m.enc_angle3);
      stream.next(m.enc_angle4);
      stream.next(m.enc_angle5);
      stream.next(m.xvel1);
      stream.next(m.yvel1);
      stream.next(m.xvel2);
      stream.next(m.yvel2);
      stream.next(m.xvel3);
      stream.next(m.yvel3);
      stream.next(m.xvel4);
      stream.next(m.yvel4);
      stream.next(m.xvel5);
      stream.next(m.yvel5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct feedback_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snake_demo::feedback_angles_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "enc_angle1: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle1);
    s << indent << "enc_angle2: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle2);
    s << indent << "enc_angle3: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle3);
    s << indent << "enc_angle4: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle4);
    s << indent << "enc_angle5: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle5);
    s << indent << "xvel1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xvel1);
    s << indent << "yvel1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yvel1);
    s << indent << "xvel2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xvel2);
    s << indent << "yvel2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yvel2);
    s << indent << "xvel3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xvel3);
    s << indent << "yvel3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yvel3);
    s << indent << "xvel4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xvel4);
    s << indent << "yvel4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yvel4);
    s << indent << "xvel5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xvel5);
    s << indent << "yvel5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yvel5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_DEMO_MESSAGE_FEEDBACK_ANGLES_H
