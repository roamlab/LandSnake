// Generated by gencpp from file snake_demo/calculations.msg
// DO NOT EDIT!


#ifndef SNAKE_DEMO_MESSAGE_CALCULATIONS_H
#define SNAKE_DEMO_MESSAGE_CALCULATIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_demo
{
template <class ContainerAllocator>
struct calculations_
{
  typedef calculations_<ContainerAllocator> Type;

  calculations_()
    : timestamp(0)
    , torque1(0.0)
    , torque2(0.0)
    , torque3(0.0)
    , torque4(0.0)
    , torque5(0.0)
    , angvel1(0.0)
    , angvel2(0.0)
    , angvel3(0.0)
    , angvel4(0.0)
    , angvel5(0.0)
    , enc_angle1(0.0)
    , enc_angle2(0.0)
    , enc_angle3(0.0)
    , enc_angle4(0.0)
    , enc_angle5(0.0)  {
    }
  calculations_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , torque1(0.0)
    , torque2(0.0)
    , torque3(0.0)
    , torque4(0.0)
    , torque5(0.0)
    , angvel1(0.0)
    , angvel2(0.0)
    , angvel3(0.0)
    , angvel4(0.0)
    , angvel5(0.0)
    , enc_angle1(0.0)
    , enc_angle2(0.0)
    , enc_angle3(0.0)
    , enc_angle4(0.0)
    , enc_angle5(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef float _torque1_type;
  _torque1_type torque1;

   typedef float _torque2_type;
  _torque2_type torque2;

   typedef float _torque3_type;
  _torque3_type torque3;

   typedef float _torque4_type;
  _torque4_type torque4;

   typedef float _torque5_type;
  _torque5_type torque5;

   typedef float _angvel1_type;
  _angvel1_type angvel1;

   typedef float _angvel2_type;
  _angvel2_type angvel2;

   typedef float _angvel3_type;
  _angvel3_type angvel3;

   typedef float _angvel4_type;
  _angvel4_type angvel4;

   typedef float _angvel5_type;
  _angvel5_type angvel5;

   typedef float _enc_angle1_type;
  _enc_angle1_type enc_angle1;

   typedef float _enc_angle2_type;
  _enc_angle2_type enc_angle2;

   typedef float _enc_angle3_type;
  _enc_angle3_type enc_angle3;

   typedef float _enc_angle4_type;
  _enc_angle4_type enc_angle4;

   typedef float _enc_angle5_type;
  _enc_angle5_type enc_angle5;





  typedef boost::shared_ptr< ::snake_demo::calculations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_demo::calculations_<ContainerAllocator> const> ConstPtr;

}; // struct calculations_

typedef ::snake_demo::calculations_<std::allocator<void> > calculations;

typedef boost::shared_ptr< ::snake_demo::calculations > calculationsPtr;
typedef boost::shared_ptr< ::snake_demo::calculations const> calculationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_demo::calculations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_demo::calculations_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snake_demo::calculations_<ContainerAllocator1> & lhs, const ::snake_demo::calculations_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.torque1 == rhs.torque1 &&
    lhs.torque2 == rhs.torque2 &&
    lhs.torque3 == rhs.torque3 &&
    lhs.torque4 == rhs.torque4 &&
    lhs.torque5 == rhs.torque5 &&
    lhs.angvel1 == rhs.angvel1 &&
    lhs.angvel2 == rhs.angvel2 &&
    lhs.angvel3 == rhs.angvel3 &&
    lhs.angvel4 == rhs.angvel4 &&
    lhs.angvel5 == rhs.angvel5 &&
    lhs.enc_angle1 == rhs.enc_angle1 &&
    lhs.enc_angle2 == rhs.enc_angle2 &&
    lhs.enc_angle3 == rhs.enc_angle3 &&
    lhs.enc_angle4 == rhs.enc_angle4 &&
    lhs.enc_angle5 == rhs.enc_angle5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snake_demo::calculations_<ContainerAllocator1> & lhs, const ::snake_demo::calculations_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snake_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::snake_demo::calculations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_demo::calculations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::calculations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::calculations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::calculations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::calculations_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_demo::calculations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0391199eca786947ffc0b714f855b349";
  }

  static const char* value(const ::snake_demo::calculations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0391199eca786947ULL;
  static const uint64_t static_value2 = 0xffc0b714f855b349ULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_demo::calculations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_demo/calculations";
  }

  static const char* value(const ::snake_demo::calculations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_demo::calculations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n"
"float32 torque1\n"
"float32 torque2\n"
"float32 torque3\n"
"float32 torque4\n"
"float32 torque5\n"
"float32 angvel1\n"
"float32 angvel2\n"
"float32 angvel3\n"
"float32 angvel4\n"
"float32 angvel5\n"
"float32 enc_angle1\n"
"float32 enc_angle2\n"
"float32 enc_angle3\n"
"float32 enc_angle4\n"
"float32 enc_angle5\n"
;
  }

  static const char* value(const ::snake_demo::calculations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_demo::calculations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.torque1);
      stream.next(m.torque2);
      stream.next(m.torque3);
      stream.next(m.torque4);
      stream.next(m.torque5);
      stream.next(m.angvel1);
      stream.next(m.angvel2);
      stream.next(m.angvel3);
      stream.next(m.angvel4);
      stream.next(m.angvel5);
      stream.next(m.enc_angle1);
      stream.next(m.enc_angle2);
      stream.next(m.enc_angle3);
      stream.next(m.enc_angle4);
      stream.next(m.enc_angle5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calculations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_demo::calculations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snake_demo::calculations_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "torque1: ";
    Printer<float>::stream(s, indent + "  ", v.torque1);
    s << indent << "torque2: ";
    Printer<float>::stream(s, indent + "  ", v.torque2);
    s << indent << "torque3: ";
    Printer<float>::stream(s, indent + "  ", v.torque3);
    s << indent << "torque4: ";
    Printer<float>::stream(s, indent + "  ", v.torque4);
    s << indent << "torque5: ";
    Printer<float>::stream(s, indent + "  ", v.torque5);
    s << indent << "angvel1: ";
    Printer<float>::stream(s, indent + "  ", v.angvel1);
    s << indent << "angvel2: ";
    Printer<float>::stream(s, indent + "  ", v.angvel2);
    s << indent << "angvel3: ";
    Printer<float>::stream(s, indent + "  ", v.angvel3);
    s << indent << "angvel4: ";
    Printer<float>::stream(s, indent + "  ", v.angvel4);
    s << indent << "angvel5: ";
    Printer<float>::stream(s, indent + "  ", v.angvel5);
    s << indent << "enc_angle1: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle1);
    s << indent << "enc_angle2: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle2);
    s << indent << "enc_angle3: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle3);
    s << indent << "enc_angle4: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle4);
    s << indent << "enc_angle5: ";
    Printer<float>::stream(s, indent + "  ", v.enc_angle5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_DEMO_MESSAGE_CALCULATIONS_H
