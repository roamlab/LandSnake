// Generated by gencpp from file snake_demo/cmd_angles.msg
// DO NOT EDIT!


#ifndef SNAKE_DEMO_MESSAGE_CMD_ANGLES_H
#define SNAKE_DEMO_MESSAGE_CMD_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_demo
{
template <class ContainerAllocator>
struct cmd_angles_
{
  typedef cmd_angles_<ContainerAllocator> Type;

  cmd_angles_()
    : angle1(0.0)
    , angle2(0.0)
    , angle3(0.0)
    , angle4(0.0)
    , angle5(0.0)  {
    }
  cmd_angles_(const ContainerAllocator& _alloc)
    : angle1(0.0)
    , angle2(0.0)
    , angle3(0.0)
    , angle4(0.0)
    , angle5(0.0)  {
  (void)_alloc;
    }



   typedef float _angle1_type;
  _angle1_type angle1;

   typedef float _angle2_type;
  _angle2_type angle2;

   typedef float _angle3_type;
  _angle3_type angle3;

   typedef float _angle4_type;
  _angle4_type angle4;

   typedef float _angle5_type;
  _angle5_type angle5;





  typedef boost::shared_ptr< ::snake_demo::cmd_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_demo::cmd_angles_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_angles_

typedef ::snake_demo::cmd_angles_<std::allocator<void> > cmd_angles;

typedef boost::shared_ptr< ::snake_demo::cmd_angles > cmd_anglesPtr;
typedef boost::shared_ptr< ::snake_demo::cmd_angles const> cmd_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_demo::cmd_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_demo::cmd_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snake_demo::cmd_angles_<ContainerAllocator1> & lhs, const ::snake_demo::cmd_angles_<ContainerAllocator2> & rhs)
{
  return lhs.angle1 == rhs.angle1 &&
    lhs.angle2 == rhs.angle2 &&
    lhs.angle3 == rhs.angle3 &&
    lhs.angle4 == rhs.angle4 &&
    lhs.angle5 == rhs.angle5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snake_demo::cmd_angles_<ContainerAllocator1> & lhs, const ::snake_demo::cmd_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snake_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::snake_demo::cmd_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_demo::cmd_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::cmd_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::cmd_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::cmd_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::cmd_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_demo::cmd_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b55ed2e9fa1052eea0ca3ebe1016bcf9";
  }

  static const char* value(const ::snake_demo::cmd_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb55ed2e9fa1052eeULL;
  static const uint64_t static_value2 = 0xa0ca3ebe1016bcf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_demo::cmd_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_demo/cmd_angles";
  }

  static const char* value(const ::snake_demo::cmd_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_demo::cmd_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle1\n"
"float32 angle2\n"
"float32 angle3\n"
"float32 angle4\n"
"float32 angle5\n"
"\n"
"\n"
;
  }

  static const char* value(const ::snake_demo::cmd_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_demo::cmd_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle1);
      stream.next(m.angle2);
      stream.next(m.angle3);
      stream.next(m.angle4);
      stream.next(m.angle5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_demo::cmd_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snake_demo::cmd_angles_<ContainerAllocator>& v)
  {
    s << indent << "angle1: ";
    Printer<float>::stream(s, indent + "  ", v.angle1);
    s << indent << "angle2: ";
    Printer<float>::stream(s, indent + "  ", v.angle2);
    s << indent << "angle3: ";
    Printer<float>::stream(s, indent + "  ", v.angle3);
    s << indent << "angle4: ";
    Printer<float>::stream(s, indent + "  ", v.angle4);
    s << indent << "angle5: ";
    Printer<float>::stream(s, indent + "  ", v.angle5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_DEMO_MESSAGE_CMD_ANGLES_H
