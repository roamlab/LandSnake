// Generated by gencpp from file snake_demo/feedback_angles.msg
// DO NOT EDIT!


#ifndef SNAKE_DEMO_MESSAGE_FEEDBACK_ANGLES_H
#define SNAKE_DEMO_MESSAGE_FEEDBACK_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_demo
{
template <class ContainerAllocator>
struct feedback_angles_
{
  typedef feedback_angles_<ContainerAllocator> Type;

  feedback_angles_()
    : timestamp(0)
    , sea_angle1(0.0)
    , sea_angle2(0.0)
    , sea_angle3(0.0)
    , sea_angle4(0.0)
    , sea_angle5(0.0)
    , dxl_angle1(0.0)
    , dxl_angle2(0.0)
    , dxl_angle3(0.0)
    , dxl_angle4(0.0)
    , dxl_angle5(0.0)  {
    }
  feedback_angles_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , sea_angle1(0.0)
    , sea_angle2(0.0)
    , sea_angle3(0.0)
    , sea_angle4(0.0)
    , sea_angle5(0.0)
    , dxl_angle1(0.0)
    , dxl_angle2(0.0)
    , dxl_angle3(0.0)
    , dxl_angle4(0.0)
    , dxl_angle5(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef float _sea_angle1_type;
  _sea_angle1_type sea_angle1;

   typedef float _sea_angle2_type;
  _sea_angle2_type sea_angle2;

   typedef float _sea_angle3_type;
  _sea_angle3_type sea_angle3;

   typedef float _sea_angle4_type;
  _sea_angle4_type sea_angle4;

   typedef float _sea_angle5_type;
  _sea_angle5_type sea_angle5;

   typedef float _dxl_angle1_type;
  _dxl_angle1_type dxl_angle1;

   typedef float _dxl_angle2_type;
  _dxl_angle2_type dxl_angle2;

   typedef float _dxl_angle3_type;
  _dxl_angle3_type dxl_angle3;

   typedef float _dxl_angle4_type;
  _dxl_angle4_type dxl_angle4;

   typedef float _dxl_angle5_type;
  _dxl_angle5_type dxl_angle5;





  typedef boost::shared_ptr< ::snake_demo::feedback_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_demo::feedback_angles_<ContainerAllocator> const> ConstPtr;

}; // struct feedback_angles_

typedef ::snake_demo::feedback_angles_<std::allocator<void> > feedback_angles;

typedef boost::shared_ptr< ::snake_demo::feedback_angles > feedback_anglesPtr;
typedef boost::shared_ptr< ::snake_demo::feedback_angles const> feedback_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_demo::feedback_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_demo::feedback_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snake_demo::feedback_angles_<ContainerAllocator1> & lhs, const ::snake_demo::feedback_angles_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.sea_angle1 == rhs.sea_angle1 &&
    lhs.sea_angle2 == rhs.sea_angle2 &&
    lhs.sea_angle3 == rhs.sea_angle3 &&
    lhs.sea_angle4 == rhs.sea_angle4 &&
    lhs.sea_angle5 == rhs.sea_angle5 &&
    lhs.dxl_angle1 == rhs.dxl_angle1 &&
    lhs.dxl_angle2 == rhs.dxl_angle2 &&
    lhs.dxl_angle3 == rhs.dxl_angle3 &&
    lhs.dxl_angle4 == rhs.dxl_angle4 &&
    lhs.dxl_angle5 == rhs.dxl_angle5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snake_demo::feedback_angles_<ContainerAllocator1> & lhs, const ::snake_demo::feedback_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snake_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::snake_demo::feedback_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_demo::feedback_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::feedback_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_demo::feedback_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::feedback_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_demo::feedback_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e66b029179d9b1560650234dca943c0";
  }

  static const char* value(const ::snake_demo::feedback_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e66b029179d9b15ULL;
  static const uint64_t static_value2 = 0x60650234dca943c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_demo/feedback_angles";
  }

  static const char* value(const ::snake_demo::feedback_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n"
"float32 sea_angle1\n"
"float32 sea_angle2\n"
"float32 sea_angle3\n"
"float32 sea_angle4\n"
"float32 sea_angle5\n"
"float32 dxl_angle1\n"
"float32 dxl_angle2\n"
"float32 dxl_angle3\n"
"float32 dxl_angle4\n"
"float32 dxl_angle5\n"
"\n"
;
  }

  static const char* value(const ::snake_demo::feedback_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_demo::feedback_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.sea_angle1);
      stream.next(m.sea_angle2);
      stream.next(m.sea_angle3);
      stream.next(m.sea_angle4);
      stream.next(m.sea_angle5);
      stream.next(m.dxl_angle1);
      stream.next(m.dxl_angle2);
      stream.next(m.dxl_angle3);
      stream.next(m.dxl_angle4);
      stream.next(m.dxl_angle5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct feedback_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_demo::feedback_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snake_demo::feedback_angles_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "sea_angle1: ";
    Printer<float>::stream(s, indent + "  ", v.sea_angle1);
    s << indent << "sea_angle2: ";
    Printer<float>::stream(s, indent + "  ", v.sea_angle2);
    s << indent << "sea_angle3: ";
    Printer<float>::stream(s, indent + "  ", v.sea_angle3);
    s << indent << "sea_angle4: ";
    Printer<float>::stream(s, indent + "  ", v.sea_angle4);
    s << indent << "sea_angle5: ";
    Printer<float>::stream(s, indent + "  ", v.sea_angle5);
    s << indent << "dxl_angle1: ";
    Printer<float>::stream(s, indent + "  ", v.dxl_angle1);
    s << indent << "dxl_angle2: ";
    Printer<float>::stream(s, indent + "  ", v.dxl_angle2);
    s << indent << "dxl_angle3: ";
    Printer<float>::stream(s, indent + "  ", v.dxl_angle3);
    s << indent << "dxl_angle4: ";
    Printer<float>::stream(s, indent + "  ", v.dxl_angle4);
    s << indent << "dxl_angle5: ";
    Printer<float>::stream(s, indent + "  ", v.dxl_angle5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_DEMO_MESSAGE_FEEDBACK_ANGLES_H
