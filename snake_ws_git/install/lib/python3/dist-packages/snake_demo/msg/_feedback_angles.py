# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snake_demo/feedback_angles.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class feedback_angles(genpy.Message):
  _md5sum = "2e66b029179d9b1560650234dca943c0"
  _type = "snake_demo/feedback_angles"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
float32 sea_angle1
float32 sea_angle2
float32 sea_angle3
float32 sea_angle4
float32 sea_angle5
float32 dxl_angle1
float32 dxl_angle2
float32 dxl_angle3
float32 dxl_angle4
float32 dxl_angle5

"""
  __slots__ = ['timestamp','sea_angle1','sea_angle2','sea_angle3','sea_angle4','sea_angle5','dxl_angle1','dxl_angle2','dxl_angle3','dxl_angle4','dxl_angle5']
  _slot_types = ['uint64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,sea_angle1,sea_angle2,sea_angle3,sea_angle4,sea_angle5,dxl_angle1,dxl_angle2,dxl_angle3,dxl_angle4,dxl_angle5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(feedback_angles, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.sea_angle1 is None:
        self.sea_angle1 = 0.
      if self.sea_angle2 is None:
        self.sea_angle2 = 0.
      if self.sea_angle3 is None:
        self.sea_angle3 = 0.
      if self.sea_angle4 is None:
        self.sea_angle4 = 0.
      if self.sea_angle5 is None:
        self.sea_angle5 = 0.
      if self.dxl_angle1 is None:
        self.dxl_angle1 = 0.
      if self.dxl_angle2 is None:
        self.dxl_angle2 = 0.
      if self.dxl_angle3 is None:
        self.dxl_angle3 = 0.
      if self.dxl_angle4 is None:
        self.dxl_angle4 = 0.
      if self.dxl_angle5 is None:
        self.dxl_angle5 = 0.
    else:
      self.timestamp = 0
      self.sea_angle1 = 0.
      self.sea_angle2 = 0.
      self.sea_angle3 = 0.
      self.sea_angle4 = 0.
      self.sea_angle5 = 0.
      self.dxl_angle1 = 0.
      self.dxl_angle2 = 0.
      self.dxl_angle3 = 0.
      self.dxl_angle4 = 0.
      self.dxl_angle5 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Q10f().pack(_x.timestamp, _x.sea_angle1, _x.sea_angle2, _x.sea_angle3, _x.sea_angle4, _x.sea_angle5, _x.dxl_angle1, _x.dxl_angle2, _x.dxl_angle3, _x.dxl_angle4, _x.dxl_angle5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.timestamp, _x.sea_angle1, _x.sea_angle2, _x.sea_angle3, _x.sea_angle4, _x.sea_angle5, _x.dxl_angle1, _x.dxl_angle2, _x.dxl_angle3, _x.dxl_angle4, _x.dxl_angle5,) = _get_struct_Q10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Q10f().pack(_x.timestamp, _x.sea_angle1, _x.sea_angle2, _x.sea_angle3, _x.sea_angle4, _x.sea_angle5, _x.dxl_angle1, _x.dxl_angle2, _x.dxl_angle3, _x.dxl_angle4, _x.dxl_angle5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.timestamp, _x.sea_angle1, _x.sea_angle2, _x.sea_angle3, _x.sea_angle4, _x.sea_angle5, _x.dxl_angle1, _x.dxl_angle2, _x.dxl_angle3, _x.dxl_angle4, _x.dxl_angle5,) = _get_struct_Q10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q10f = None
def _get_struct_Q10f():
    global _struct_Q10f
    if _struct_Q10f is None:
        _struct_Q10f = struct.Struct("<Q10f")
    return _struct_Q10f
